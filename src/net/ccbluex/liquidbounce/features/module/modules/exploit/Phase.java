/*     */ package net.ccbluex.liquidbounce.features.module.modules.exploit;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.client.block.IBlock;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.client.network.IINetHandlerPlayClient;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayer;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.util.IAxisAlignedBB;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
/*     */ import net.ccbluex.liquidbounce.event.BlockBBEvent;
/*     */ import net.ccbluex.liquidbounce.event.EventTarget;
/*     */ import net.ccbluex.liquidbounce.event.MoveEvent;
/*     */ import net.ccbluex.liquidbounce.event.PacketEvent;
/*     */ import net.ccbluex.liquidbounce.event.PushOutEvent;
/*     */ import net.ccbluex.liquidbounce.utils.MovementUtils;
/*     */ import net.ccbluex.liquidbounce.utils.block.BlockUtils;
/*     */ import net.ccbluex.liquidbounce.utils.timer.TickTimer;
/*     */ import net.ccbluex.liquidbounce.value.ListValue;
/*     */ 
/*     */ @ModuleInfo(name = "Phase", description = "Allows you to walk through blocks.", category = ModuleCategory.EXPLOIT)
/*     */ public class Phase extends Module {
/*  20 */   private final ListValue modeValue = new ListValue("Mode", new String[] { "Vanilla", "Skip", "Spartan", "Clip", "AAC3.5.0", "Mineplex" }, "Vanilla");
/*     */   
/*  22 */   private final TickTimer tickTimer = new TickTimer();
/*     */   
/*     */   private boolean mineplexClip;
/*  25 */   private final TickTimer mineplexTickTimer = new TickTimer(); @EventTarget
/*     */   public void onUpdate(UpdateEvent event) { double d1, direction, yaw, d2, posX, x, oldX, d3, posZ, z, oldZ;
/*     */     int i;
/*     */     double d4, d5;
/*  29 */     boolean isInsideBlock = BlockUtils.collideBlockIntersects(mc.getThePlayer().getEntityBoundingBox(), block -> Boolean.valueOf(!classProvider.isBlockAir(block)));
/*     */     
/*  31 */     if (isInsideBlock && !((String)this.modeValue.get()).equalsIgnoreCase("Mineplex")) {
/*  32 */       mc.getThePlayer().setNoClip(true);
/*  33 */       mc.getThePlayer().setMotionY(0.0D);
/*  34 */       mc.getThePlayer().setOnGround(false);
/*     */     } 
/*     */     
/*  37 */     IINetHandlerPlayClient netHandlerPlayClient = mc.getNetHandler();
/*     */     
/*  39 */     switch (((String)this.modeValue.get()).toLowerCase()) {
/*     */       case "vanilla":
/*  41 */         if (!mc.getThePlayer().getOnGround() || !this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || (isInsideBlock && !mc.getThePlayer().isSneaking())) {
/*     */           break;
/*     */         }
/*  44 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
/*  45 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(0.5D, 0.0D, 0.5D, true));
/*  46 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
/*  47 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() + 0.2D, mc.getThePlayer().getPosZ(), true));
/*  48 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(0.5D, 0.0D, 0.5D, true));
/*  49 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX() + 0.5D, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + 0.5D, true));
/*  50 */         d1 = Math.toRadians(mc.getThePlayer().getRotationYaw());
/*  51 */         d2 = -Math.sin(d1) * 0.04D;
/*  52 */         d3 = Math.cos(d1) * 0.04D;
/*  53 */         mc.getThePlayer().setPosition(mc.getThePlayer().getPosX() + d2, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + d3);
/*  54 */         this.tickTimer.reset();
/*     */         break;
/*     */       
/*     */       case "skip":
/*  58 */         if (!mc.getThePlayer().getOnGround() || !this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || (isInsideBlock && !mc.getThePlayer().isSneaking())) {
/*     */           break;
/*     */         }
/*  61 */         direction = MovementUtils.getDirection();
/*  62 */         posX = -Math.sin(direction) * 0.3D;
/*  63 */         posZ = Math.cos(direction) * 0.3D;
/*     */         
/*  65 */         for (i = 0; i < 3; i++) {
/*  66 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() + 0.06D, mc.getThePlayer().getPosZ(), true));
/*  67 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX() + posX * i, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + posZ * i, true));
/*     */         } 
/*     */         
/*  70 */         mc.getThePlayer().setEntityBoundingBox(mc.getThePlayer().getEntityBoundingBox().offset(posX, 0.0D, posZ));
/*  71 */         mc.getThePlayer().setPositionAndUpdate(mc.getThePlayer().getPosX() + posX, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + posZ);
/*  72 */         this.tickTimer.reset();
/*     */         break;
/*     */       
/*     */       case "spartan":
/*  76 */         if (!mc.getThePlayer().getOnGround() || !this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || (isInsideBlock && !mc.getThePlayer().isSneaking())) {
/*     */           break;
/*     */         }
/*  79 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
/*  80 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(0.5D, 0.0D, 0.5D, true));
/*  81 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
/*  82 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() - 0.2D, mc.getThePlayer().getPosZ(), true));
/*  83 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(0.5D, 0.0D, 0.5D, true));
/*  84 */         netHandlerPlayClient.addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX() + 0.5D, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + 0.5D, true));
/*  85 */         yaw = Math.toRadians(mc.getThePlayer().getRotationYaw());
/*  86 */         x = -Math.sin(yaw) * 0.04D;
/*  87 */         z = Math.cos(yaw) * 0.04D;
/*  88 */         mc.getThePlayer().setPosition(mc.getThePlayer().getPosX() + x, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + z);
/*  89 */         this.tickTimer.reset();
/*     */         break;
/*     */       
/*     */       case "clip":
/*  93 */         if (!this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || (isInsideBlock && !mc.getThePlayer().isSneaking())) {
/*     */           break;
/*     */         }
/*  96 */         yaw = Math.toRadians(mc.getThePlayer().getRotationYaw());
/*  97 */         oldX = mc.getThePlayer().getPosX();
/*  98 */         oldZ = mc.getThePlayer().getPosZ();
/*     */         
/* 100 */         for (i = 1; i <= 10; i++) {
/* 101 */           double d6 = -Math.sin(yaw) * i;
/* 102 */           double d7 = Math.cos(yaw) * i;
/*     */           
/* 104 */           if (classProvider.isBlockAir(BlockUtils.getBlock(new WBlockPos(oldX + d6, mc.getThePlayer().getPosY(), oldZ + d7))) && classProvider.isBlockAir(BlockUtils.getBlock(new WBlockPos(oldX + d6, mc.getThePlayer().getPosY() + 1.0D, oldZ + d7)))) {
/* 105 */             mc.getThePlayer().setPosition(oldX + d6, mc.getThePlayer().getPosY(), oldZ + d7);
/*     */             break;
/*     */           } 
/*     */         } 
/* 109 */         this.tickTimer.reset();
/*     */         break;
/*     */       
/*     */       case "aac3.5.0":
/* 113 */         if (!this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || (isInsideBlock && !mc.getThePlayer().isSneaking())) {
/*     */           break;
/*     */         }
/* 116 */         yaw = Math.toRadians(mc.getThePlayer().getRotationYaw());
/* 117 */         oldX = mc.getThePlayer().getPosX();
/* 118 */         oldZ = mc.getThePlayer().getPosZ();
/* 119 */         d4 = -Math.sin(yaw);
/* 120 */         d5 = Math.cos(yaw);
/*     */         
/* 122 */         mc.getThePlayer().setPosition(oldX + d4, mc.getThePlayer().getPosY(), oldZ + d5);
/* 123 */         this.tickTimer.reset();
/*     */         break;
/*     */     } 
/*     */ 
/*     */     
/* 128 */     this.tickTimer.update(); }
/*     */ 
/*     */   
/*     */   @EventTarget
/*     */   public void onBlockBB(BlockBBEvent event) {
/* 133 */     if (mc.getThePlayer() != null && BlockUtils.collideBlockIntersects(mc.getThePlayer().getEntityBoundingBox(), block -> Boolean.valueOf(!classProvider.isBlockAir(block))) && event.getBoundingBox() != null && event.getBoundingBox().getMaxY() > mc.getThePlayer().getEntityBoundingBox().getMinY() && !((String)this.modeValue.get()).equalsIgnoreCase("Mineplex")) {
/* 134 */       IAxisAlignedBB axisAlignedBB = event.getBoundingBox();
/*     */       
/* 136 */       event.setBoundingBox(classProvider.createAxisAlignedBB(axisAlignedBB.getMaxX(), mc.getThePlayer().getEntityBoundingBox().getMinY(), axisAlignedBB.getMaxZ(), axisAlignedBB.getMinX(), axisAlignedBB.getMinY(), axisAlignedBB.getMinZ()));
/*     */     } 
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   public void onPacket(PacketEvent event) {
/* 142 */     IPacket packet = event.getPacket();
/*     */     
/* 144 */     if (classProvider.isCPacketPlayer(packet)) {
/* 145 */       ICPacketPlayer packetPlayer = packet.asCPacketPlayer();
/*     */       
/* 147 */       if (((String)this.modeValue.get()).equalsIgnoreCase("AAC3.5.0")) {
/* 148 */         float yaw = (float)MovementUtils.getDirection();
/*     */         
/* 150 */         packetPlayer.setX(packetPlayer.getX() - Math.sin(yaw) * 1.0E-8D);
/* 151 */         packetPlayer.setZ(packetPlayer.getZ() + Math.cos(yaw) * 1.0E-8D);
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   private void onMove(MoveEvent event) {
/* 158 */     if (((String)this.modeValue.get()).equalsIgnoreCase("mineplex")) {
/* 159 */       if (mc.getThePlayer().isCollidedVertically())
/* 160 */         this.mineplexClip = true; 
/* 161 */       if (!this.mineplexClip) {
/*     */         return;
/*     */       }
/* 164 */       this.mineplexTickTimer.update();
/*     */       
/* 166 */       event.setX(0.0D);
/* 167 */       event.setZ(0.0D);
/*     */       
/* 169 */       if (this.mineplexTickTimer.hasTimePassed(3)) {
/* 170 */         this.mineplexTickTimer.reset();
/* 171 */         this.mineplexClip = false;
/* 172 */       } else if (this.mineplexTickTimer.hasTimePassed(1)) {
/* 173 */         double offset = this.mineplexTickTimer.hasTimePassed(2) ? 1.6D : 0.06D;
/* 174 */         double direction = MovementUtils.getDirection();
/*     */         
/* 176 */         mc.getThePlayer().setPosition(mc.getThePlayer().getPosX() + -Math.sin(direction) * offset, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + Math.cos(direction) * offset);
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   public void onPushOut(PushOutEvent event) {
/* 183 */     event.cancelEvent();
/*     */   }
/*     */ 
/*     */   
/*     */   public String getTag() {
/* 188 */     return (String)this.modeValue.get();
/*     */   }
/*     */ }


/* Location:              C:\Users\Administrator\Desktop\XSJ Client v2.3 New Year's Special Edition.jar!\net\ccbluex\liquidbounce\features\module\modules\exploit\Phase.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */