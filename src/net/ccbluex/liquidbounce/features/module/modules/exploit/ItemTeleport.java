/*     */ package net.ccbluex.liquidbounce.features.module.modules.exploit;
/*     */ 
/*     */ import java.awt.Color;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.List;
/*     */ import javax.vecmath.Vector3f;
/*     */ import net.ccbluex.liquidbounce.api.enums.MaterialType;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.block.state.IIBlockState;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.renderer.entity.IRenderManager;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.util.IMovingObjectPosition;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
/*     */ import net.ccbluex.liquidbounce.event.EventTarget;
/*     */ import net.ccbluex.liquidbounce.event.Render3DEvent;
/*     */ import net.ccbluex.liquidbounce.event.UpdateEvent;
/*     */ import net.ccbluex.liquidbounce.features.module.Module;
/*     */ import net.ccbluex.liquidbounce.features.module.ModuleCategory;
/*     */ import net.ccbluex.liquidbounce.features.module.ModuleInfo;
/*     */ import net.ccbluex.liquidbounce.utils.ClientUtils;
/*     */ import net.ccbluex.liquidbounce.utils.MovementUtils;
/*     */ import net.ccbluex.liquidbounce.utils.block.BlockUtils;
/*     */ import net.ccbluex.liquidbounce.utils.render.RenderUtils;
/*     */ import net.ccbluex.liquidbounce.value.BoolValue;
/*     */ import net.ccbluex.liquidbounce.value.ListValue;
/*     */ import org.lwjgl.input.Mouse;
/*     */ import org.lwjgl.opengl.GL11;
/*     */ 
/*     */ @ModuleInfo(name = "ItemTeleport", description = "Allows you to pick up items far away.", category = ModuleCategory.EXPLOIT)
/*     */ public class ItemTeleport
/*     */   extends Module
/*     */ {
/*  34 */   private final ListValue modeValue = new ListValue("Mode", new String[] { "New", "Old" }, "New");
/*  35 */   private final BoolValue resetAfterTp = new BoolValue("ResetAfterTP", true);
/*  36 */   private final ListValue buttonValue = new ListValue("Button", new String[] { "Left", "Right", "Middle" }, "Middle");
/*     */   
/*     */   private int delay;
/*     */   
/*     */   private WBlockPos endPos;
/*     */   private IMovingObjectPosition objectPosition;
/*     */   
/*     */   public void onDisable() {
/*  44 */     this.delay = 0;
/*  45 */     this.endPos = null;
/*  46 */     super.onDisable();
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   public void onUpdate(UpdateEvent event) {
/*  51 */     if (mc.getCurrentScreen() == null && Mouse.isButtonDown(Arrays.<String>asList(this.buttonValue.getValues()).indexOf(this.buttonValue.get())) && this.delay <= 0) {
/*  52 */       this.endPos = this.objectPosition.getBlockPos();
/*     */       
/*  54 */       IIBlockState state = BlockUtils.getState(this.endPos);
/*     */       
/*  56 */       if (state.getBlock().getMaterial(state) == classProvider.getMaterialEnum(MaterialType.AIR)) {
/*  57 */         this.endPos = null;
/*     */         
/*     */         return;
/*     */       } 
/*  61 */       ClientUtils.displayChatMessage("§7[§8§lItemTeleport§7] §3Position was set to §8" + this.endPos.getX() + "§3, §8" + this.endPos.getY() + "§3, §8" + this.endPos.getZ());
/*  62 */       this.delay = 6;
/*     */     } 
/*     */     
/*  65 */     if (this.delay > 0) {
/*  66 */       this.delay--;
/*     */     }
/*  68 */     IEntityPlayerSP thePlayer = mc.getThePlayer();
/*     */     
/*  70 */     if (thePlayer == null) {
/*     */       return;
/*     */     }
/*  73 */     if (this.endPos != null && thePlayer.isSneaking())
/*  74 */       if (!thePlayer.getOnGround()) {
/*  75 */         double endX = this.endPos.getX() + 0.5D;
/*  76 */         double endY = this.endPos.getY() + 1.0D;
/*  77 */         double endZ = this.endPos.getZ() + 0.5D;
/*     */         
/*  79 */         switch (((String)this.modeValue.get()).toLowerCase()) {
/*     */           case "old":
/*  81 */             for (Vector3f vector3f : vanillaTeleportPositions(endX, endY, endZ, 4.0D))
/*  82 */               mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(vector3f.getX(), vector3f.getY(), vector3f.getZ(), false)); 
/*     */             break;
/*     */           case "new":
/*  85 */             for (Vector3f vector3f : vanillaTeleportPositions(endX, endY, endZ, 5.0D)) {
/*  86 */               mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
/*  87 */               mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(vector3f.x, vector3f.y, vector3f.z, true));
/*  88 */               mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
/*  89 */               mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 4.0D, thePlayer.getPosZ(), true));
/*  90 */               mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(vector3f.x, vector3f.y, vector3f.z, true));
/*  91 */               MovementUtils.forward(0.04D);
/*     */             } 
/*     */             break;
/*     */         } 
/*     */         
/*  96 */         if (((Boolean)this.resetAfterTp.get()).booleanValue()) {
/*  97 */           this.endPos = null;
/*     */         }
/*  99 */         ClientUtils.displayChatMessage("§7[§8§lItemTeleport§7] §3Tried to collect items");
/*     */       } else {
/* 101 */         thePlayer.jump();
/*     */       }  
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   public void onRender3D(Render3DEvent event) {
/* 107 */     this.objectPosition = mc.getThePlayer().rayTrace(1000.0D, event.getPartialTicks());
/*     */     
/* 109 */     if (this.objectPosition.getBlockPos() == null) {
/*     */       return;
/*     */     }
/* 112 */     int x = this.objectPosition.getBlockPos().getX();
/* 113 */     int y = this.objectPosition.getBlockPos().getY();
/* 114 */     int z = this.objectPosition.getBlockPos().getZ();
/*     */     
/* 116 */     IIBlockState state = BlockUtils.getState(this.objectPosition.getBlockPos());
/*     */     
/* 118 */     if (!state.getBlock().getMaterial(state).equals(classProvider.getMaterialEnum(MaterialType.AIR))) {
/* 119 */       IRenderManager renderManager = mc.getRenderManager();
/*     */       
/* 121 */       GL11.glBlendFunc(770, 771);
/* 122 */       GL11.glEnable(3042);
/* 123 */       GL11.glLineWidth(2.0F);
/* 124 */       GL11.glDisable(3553);
/* 125 */       GL11.glDisable(2929);
/* 126 */       GL11.glDepthMask(false);
/*     */       
/* 128 */       IIBlockState state1 = BlockUtils.getState(this.objectPosition.getBlockPos().up());
/*     */       
/* 130 */       RenderUtils.glColor(!state1.getBlock().getMaterial(state1).equals(classProvider.getMaterialEnum(MaterialType.AIR)) ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90));
/* 131 */       RenderUtils.drawFilledBox(classProvider.createAxisAlignedBB(x - renderManager.getRenderPosX(), (y + 1) - renderManager.getRenderPosY(), z - renderManager.getRenderPosZ(), x - renderManager.getRenderPosX() + 1.0D, y + 1.2D - renderManager.getRenderPosY(), z - renderManager.getRenderPosZ() + 1.0D));
/* 132 */       GL11.glEnable(3553);
/* 133 */       GL11.glEnable(2929);
/* 134 */       GL11.glDepthMask(true);
/* 135 */       GL11.glDisable(3042);
/*     */       
/* 137 */       RenderUtils.renderNameTag(Math.round(mc.getThePlayer().getDistance(x, y, z)) + "m", x + 0.5D, y + 1.7D, z + 0.5D);
/* 138 */       classProvider.getGlStateManager().resetColor();
/*     */     } 
/*     */   }
/*     */   
/*     */   private List<Vector3f> vanillaTeleportPositions(double tpX, double tpY, double tpZ, double speed) {
/* 143 */     List<Vector3f> positions = new ArrayList<>();
/* 144 */     double posX = tpX - mc.getThePlayer().getPosX();
/* 145 */     double posZ = tpZ - mc.getThePlayer().getPosZ();
/* 146 */     float yaw = (float)(Math.atan2(posZ, posX) * 180.0D / Math.PI - 90.0D);
/*     */     
/* 148 */     double tmpY = mc.getThePlayer().getPosY();
/*     */     
/* 150 */     double steps = 1.0D;
/*     */     double d;
/* 152 */     for (d = speed; d < getDistance(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), tpX, tpY, tpZ); d += speed) {
/* 153 */       steps++;
/*     */     }
/* 155 */     for (d = speed; d < getDistance(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), tpX, tpY, tpZ); d += speed) {
/* 156 */       double tmpX = mc.getThePlayer().getPosX() - Math.sin(Math.toRadians(yaw)) * d;
/* 157 */       double tmpZ = mc.getThePlayer().getPosZ() + Math.cos(Math.toRadians(yaw)) * d;
/* 158 */       tmpY -= (mc.getThePlayer().getPosY() - tpY) / steps;
/* 159 */       positions.add(new Vector3f((float)tmpX, (float)tmpY, (float)tmpZ));
/*     */     } 
/*     */     
/* 162 */     positions.add(new Vector3f((float)tpX, (float)tpY, (float)tpZ));
/*     */     
/* 164 */     return positions;
/*     */   }
/*     */   
/*     */   private double getDistance(double x1, double y1, double z1, double x2, double y2, double z2) {
/* 168 */     double d0 = x1 - x2;
/* 169 */     double d1 = y1 - y2;
/* 170 */     double d2 = z1 - z2;
/* 171 */     return Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
/*     */   }
/*     */ }


/* Location:              C:\Users\Administrator\Desktop\XSJ Client v2.3 New Year's Special Edition.jar!\net\ccbluex\liquidbounce\features\module\modules\exploit\ItemTeleport.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */