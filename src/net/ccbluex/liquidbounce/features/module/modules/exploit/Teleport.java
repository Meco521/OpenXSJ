/*     */ package net.ccbluex.liquidbounce.features.module.modules.exploit;
/*     */ import java.awt.Color;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import javax.vecmath.Vector3d;
/*     */ import net.ccbluex.liquidbounce.api.enums.MaterialType;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.block.state.IIBlockState;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntity;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketEntityAction;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayer;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.renderer.entity.IRenderManager;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.util.IMovingObjectPosition;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.util.WVec3;
/*     */ import net.ccbluex.liquidbounce.api.minecraft.world.IWorld;
/*     */ import net.ccbluex.liquidbounce.event.EventTarget;
/*     */ import net.ccbluex.liquidbounce.event.MoveEvent;
/*     */ import net.ccbluex.liquidbounce.event.PacketEvent;
/*     */ import net.ccbluex.liquidbounce.event.Render3DEvent;
/*     */ import net.ccbluex.liquidbounce.event.UpdateEvent;
/*     */ import net.ccbluex.liquidbounce.features.module.Module;
/*     */ import net.ccbluex.liquidbounce.features.module.ModuleCategory;
/*     */ import net.ccbluex.liquidbounce.features.module.ModuleInfo;
/*     */ import net.ccbluex.liquidbounce.utils.ClientUtils;
/*     */ import net.ccbluex.liquidbounce.utils.MovementUtils;
/*     */ import net.ccbluex.liquidbounce.utils.block.BlockUtils;
/*     */ import net.ccbluex.liquidbounce.utils.render.RenderUtils;
/*     */ import net.ccbluex.liquidbounce.utils.timer.TickTimer;
/*     */ import net.ccbluex.liquidbounce.value.BoolValue;
/*     */ import net.ccbluex.liquidbounce.value.ListValue;
/*     */ import org.lwjgl.input.Mouse;
/*     */ import org.lwjgl.opengl.GL11;
/*     */ 
/*     */ @ModuleInfo(name = "Teleport", description = "Allows you to teleport around.", category = ModuleCategory.EXPLOIT)
/*     */ public class Teleport extends Module {
/*  38 */   private final BoolValue ignoreNoCollision = new BoolValue("IgnoreNoCollision", true);
/*  39 */   private final ListValue modeValue = new ListValue("Mode", new String[] { "Blink", "Flag", "Rewinside", "OldRewinside", "Spoof", "Minesucht", "AAC3.5.0" }, "Blink");
/*  40 */   private final ListValue buttonValue = new ListValue("Button", new String[] { "Left", "Right", "Middle" }, "Middle");
/*  41 */   private final TickTimer flyTimer = new TickTimer();
/*     */   private boolean hadGround;
/*     */   private double fixedY;
/*  44 */   private final List<IPacket> packets = new ArrayList<>();
/*     */   private boolean disableLogger = false;
/*     */   private boolean zitter = false;
/*     */   private boolean doTeleport = false;
/*     */   private boolean freeze = false;
/*  49 */   private final TickTimer freezeTimer = new TickTimer();
/*     */   
/*     */   private int delay;
/*     */   
/*     */   private WBlockPos endPos;
/*     */   private IMovingObjectPosition objectPosition;
/*     */   
/*     */   public void onEnable() {
/*  57 */     if (((String)this.modeValue.get()).equalsIgnoreCase("AAC3.5.0")) {
/*  58 */       ClientUtils.displayChatMessage("§c>>> §a§lTeleport §fAAC 3.5.0 §c<<<");
/*  59 */       ClientUtils.displayChatMessage("§cHow to teleport: §aPress " + (String)this.buttonValue.get() + " mouse button.");
/*  60 */       ClientUtils.displayChatMessage("§cHow to cancel teleport: §aDisable teleport module.");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void onDisable() {
/*  66 */     this.fixedY = 0.0D;
/*  67 */     this.delay = 0;
/*  68 */     mc.getTimer().setTimerSpeed(1.0F);
/*  69 */     this.endPos = null;
/*  70 */     this.hadGround = false;
/*  71 */     this.freeze = false;
/*  72 */     this.disableLogger = false;
/*  73 */     this.flyTimer.reset();
/*     */     
/*  75 */     this.packets.clear();
/*     */     
/*  77 */     super.onDisable();
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   public void onUpdate(UpdateEvent event) {
/*  82 */     int buttonIndex = Arrays.<String>asList(this.buttonValue.getValues()).indexOf(this.buttonValue.get());
/*     */     
/*  84 */     IEntityPlayerSP thePlayer = mc.getThePlayer();
/*     */     
/*  86 */     if (thePlayer == null) {
/*     */       return;
/*     */     }
/*  89 */     if (((String)this.modeValue.get()).equals("AAC3.5.0")) {
/*  90 */       this.freezeTimer.update();
/*     */       
/*  92 */       if (this.freeze && this.freezeTimer.hasTimePassed(40)) {
/*  93 */         this.freezeTimer.reset();
/*  94 */         this.freeze = false;
/*  95 */         setState(false);
/*     */       } 
/*     */       
/*  98 */       if (!this.flyTimer.hasTimePassed(60)) {
/*  99 */         this.flyTimer.update();
/*     */         
/* 101 */         if (thePlayer.getOnGround()) {
/* 102 */           thePlayer.jump();
/*     */         } else {
/* 104 */           MovementUtils.forward(this.zitter ? -0.21D : 0.21D);
/* 105 */           this.zitter = !this.zitter;
/*     */         } 
/*     */         
/* 108 */         this.hadGround = false;
/*     */         
/*     */         return;
/*     */       } 
/* 112 */       if (thePlayer.getOnGround()) {
/* 113 */         this.hadGround = true;
/*     */       }
/* 115 */       if (!this.hadGround) {
/*     */         return;
/*     */       }
/* 118 */       if (thePlayer.getOnGround()) {
/* 119 */         thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() + 0.2D, thePlayer.getPosZ());
/*     */       }
/* 121 */       float vanillaSpeed = 2.0F;
/*     */       
/* 123 */       thePlayer.getCapabilities().setFlying(false);
/*     */       
/* 125 */       thePlayer.setMotionX(0.0D);
/* 126 */       thePlayer.setMotionY(0.0D);
/* 127 */       thePlayer.setMotionZ(0.0D);
/*     */       
/* 129 */       if (mc.getGameSettings().getKeyBindJump().isKeyDown())
/* 130 */         thePlayer.setMotionY(thePlayer.getMotionY() + 2.0D); 
/* 131 */       if (mc.getGameSettings().getKeyBindSneak().isKeyDown())
/* 132 */         thePlayer.setMotionY(thePlayer.getMotionY() - 2.0D); 
/* 133 */       MovementUtils.strafe(2.0F);
/*     */       
/* 135 */       if (Mouse.isButtonDown(buttonIndex) && !this.doTeleport) {
/* 136 */         thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() - 11.0D, thePlayer.getPosZ());
/*     */         
/* 138 */         this.disableLogger = true;
/* 139 */         this.packets.forEach(packet -> mc.getNetHandler().addToSendQueue(packet));
/*     */         
/* 141 */         this.freezeTimer.reset();
/* 142 */         this.freeze = true;
/*     */       } 
/*     */       
/* 145 */       this.doTeleport = Mouse.isButtonDown(buttonIndex);
/*     */       
/*     */       return;
/*     */     } 
/* 149 */     if (mc.getCurrentScreen() == null && Mouse.isButtonDown(buttonIndex) && this.delay <= 0) {
/* 150 */       this.endPos = this.objectPosition.getBlockPos();
/*     */ 
/*     */       
/* 153 */       IIBlockState state = BlockUtils.getState(this.endPos);
/*     */       
/* 155 */       if (state.getBlock().getMaterial(state).equals(classProvider.getMaterialEnum(MaterialType.AIR))) {
/* 156 */         this.endPos = null;
/*     */         
/*     */         return;
/*     */       } 
/* 160 */       ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Position was set to §8" + this.endPos.getX() + "§3, §8" + (((BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox((IWorld)mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null) ? (this.endPos.getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox((IWorld)mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + this.fixedY) + "§3, §8" + this.endPos.getZ());
/* 161 */       this.delay = 6;
/*     */     } 
/*     */     
/* 164 */     if (this.delay > 0) {
/* 165 */       this.delay--;
/*     */     }
/* 167 */     if (this.endPos != null) {
/* 168 */       double endX = this.endPos.getX() + 0.5D;
/*     */       
/* 170 */       double endY = ((BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox((IWorld)mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null) ? (this.endPos.getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox((IWorld)mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + this.fixedY;
/* 171 */       double endZ = this.endPos.getZ() + 0.5D;
/*     */       
/* 173 */       switch (((String)this.modeValue.get()).toLowerCase()) {
/*     */         case "blink":
/* 175 */           if (thePlayer.isSneaking()) {
/*     */             
/* 177 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketEntityAction((IEntity)thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));
/*     */ 
/*     */             
/* 180 */             PathUtils.findBlinkPath(endX, endY, endZ).forEach(vector3d -> {
/*     */                   mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(vector3d.x, vector3d.y, vector3d.z, true));
/*     */                   
/*     */                   thePlayer.setPosition(endX, endY, endZ);
/*     */                 });
/*     */             
/* 186 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketEntityAction((IEntity)thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
/*     */ 
/*     */             
/* 189 */             ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
/*     */           } 
/*     */           break;
/*     */         case "flag":
/* 193 */           if (thePlayer.isSneaking()) {
/*     */             
/* 195 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketEntityAction((IEntity)thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));
/*     */ 
/*     */             
/* 198 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
/* 199 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
/* 200 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
/* 201 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 5.0D, thePlayer.getPosZ(), true));
/* 202 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
/* 203 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + 0.5D, thePlayer.getPosY(), thePlayer.getPosZ() + 0.5D, true));
/*     */             
/* 205 */             MovementUtils.forward(0.04D);
/*     */ 
/*     */             
/* 208 */             mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketEntityAction((IEntity)thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
/*     */             
/* 210 */             ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
/*     */           } 
/*     */           break;
/*     */         case "rewinside":
/* 214 */           thePlayer.setMotionY(0.1D);
/* 215 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
/* 216 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 0.6D, thePlayer.getPosZ(), true));
/*     */           
/* 218 */           if ((int)thePlayer.getPosX() == (int)endX && (int)thePlayer.getPosY() == (int)endY && (int)thePlayer.getPosZ() == (int)endZ) {
/* 219 */             ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
/* 220 */             this.endPos = null; break;
/*     */           } 
/* 222 */           ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Teleport try...");
/*     */           break;
/*     */         case "oldrewinside":
/* 225 */           thePlayer.setMotionY(0.1D);
/*     */           
/* 227 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
/* 228 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
/* 229 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
/* 230 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
/* 231 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
/* 232 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
/*     */           
/* 234 */           if ((int)thePlayer.getPosX() == (int)endX && (int)thePlayer.getPosY() == (int)endY && (int)thePlayer.getPosZ() == (int)endZ) {
/* 235 */             ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
/* 236 */             this.endPos = null;
/*     */           } else {
/* 238 */             ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Teleport try...");
/*     */           } 
/* 240 */           MovementUtils.forward(0.04D);
/*     */           break;
/*     */         case "minesucht":
/* 243 */           if (!thePlayer.isSneaking()) {
/*     */             break;
/*     */           }
/* 246 */           mc.getNetHandler().addToSendQueue((IPacket)classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
/* 247 */           ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
/*     */           break;
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   public void onRender3D(Render3DEvent event) {
/* 255 */     if (((String)this.modeValue.get()).equals("AAC3.5.0")) {
/*     */       return;
/*     */     }
/* 258 */     IEntityPlayerSP thePlayer = mc.getThePlayer();
/*     */     
/* 260 */     if (thePlayer == null) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/* 265 */     WVec3 entityLookVec = thePlayer.getLookVec();
/*     */     
/* 267 */     WVec3 lookVec = new WVec3(entityLookVec.getXCoord() * 300.0D, entityLookVec.getYCoord() * 300.0D, entityLookVec.getZCoord() * 300.0D);
/* 268 */     WVec3 posVec = new WVec3(thePlayer.getPosX(), thePlayer.getPosY() + 1.62D, thePlayer.getPosZ());
/*     */     
/* 270 */     this.objectPosition = mc.getTheWorld().rayTraceBlocks(posVec, posVec.add(lookVec), false, ((Boolean)this.ignoreNoCollision.get()).booleanValue(), false);
/*     */     
/* 272 */     if (this.objectPosition == null || this.objectPosition.getBlockPos() == null) {
/*     */       return;
/*     */     }
/* 275 */     WBlockPos belowBlockPos = new WBlockPos(this.objectPosition.getBlockPos().getX(), this.objectPosition.getBlockPos().getY() - 1, this.objectPosition.getBlockPos().getZ());
/*     */     
/* 277 */     this.fixedY = classProvider.isBlockFence(BlockUtils.getBlock(this.objectPosition.getBlockPos())) ? (mc.getTheWorld().getCollidingBoundingBoxes((IEntity)thePlayer, thePlayer.getEntityBoundingBox().offset(this.objectPosition.getBlockPos().getX() + 0.5D - thePlayer.getPosX(), this.objectPosition.getBlockPos().getY() + 1.5D - thePlayer.getPosY(), this.objectPosition.getBlockPos().getZ() + 0.5D - thePlayer.getPosZ())).isEmpty() ? 0.5D : 0.0D) : (classProvider.isBlockFence(BlockUtils.getBlock(belowBlockPos)) ? ((!mc.getTheWorld().getCollidingBoundingBoxes((IEntity)thePlayer, thePlayer.getEntityBoundingBox().offset(this.objectPosition.getBlockPos().getX() + 0.5D - thePlayer.getPosX(), this.objectPosition.getBlockPos().getY() + 0.5D - thePlayer.getPosY(), this.objectPosition.getBlockPos().getZ() + 0.5D - thePlayer.getPosZ())).isEmpty() || BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox((IWorld)mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null) ? 0.0D : -0.5D) : (classProvider.isBlockSnow(BlockUtils.getBlock(this.objectPosition.getBlockPos())) ? 0.875D : 0.0D));
/*     */     
/* 279 */     int x = this.objectPosition.getBlockPos().getX();
/* 280 */     double y = ((BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox((IWorld)mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null) ? (this.objectPosition.getBlockPos().getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox((IWorld)mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) - 1.0D + this.fixedY;
/* 281 */     int z = this.objectPosition.getBlockPos().getZ();
/*     */     
/* 283 */     if (!classProvider.isBlockAir(BlockUtils.getBlock(this.objectPosition.getBlockPos()))) {
/* 284 */       IRenderManager renderManager = mc.getRenderManager();
/*     */       
/* 286 */       GL11.glBlendFunc(770, 771);
/* 287 */       GL11.glEnable(3042);
/* 288 */       GL11.glLineWidth(2.0F);
/* 289 */       GL11.glDisable(3553);
/* 290 */       GL11.glDisable(2929);
/* 291 */       GL11.glDepthMask(false);
/* 292 */       RenderUtils.glColor((((String)this.modeValue.get()).equalsIgnoreCase("minesucht") && thePlayer.getPosition().getY() != y + 1.0D) ? new Color(255, 0, 0, 90) : (!mc.getTheWorld().getCollidingBoundingBoxes((IEntity)thePlayer, thePlayer.getEntityBoundingBox().offset(x + 0.5D - thePlayer.getPosX(), y + 1.0D - thePlayer.getPosY(), z + 0.5D - thePlayer.getPosZ())).isEmpty() ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90)));
/* 293 */       RenderUtils.drawFilledBox(classProvider.createAxisAlignedBB(x - renderManager.getRenderPosX(), y + 1.0D - renderManager.getRenderPosY(), z - renderManager.getRenderPosZ(), x - renderManager.getRenderPosX() + 1.0D, y + 1.2D - renderManager.getRenderPosY(), z - renderManager.getRenderPosZ() + 1.0D));
/* 294 */       GL11.glEnable(3553);
/* 295 */       GL11.glEnable(2929);
/* 296 */       GL11.glDepthMask(true);
/* 297 */       GL11.glDisable(3042);
/*     */       
/* 299 */       RenderUtils.renderNameTag(Math.round(thePlayer.getDistance(x + 0.5D, y + 1.0D, z + 0.5D)) + "m", x + 0.5D, y + 1.7D, z + 0.5D);
/* 300 */       GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
/*     */     } 
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   public void onMove(MoveEvent event) {
/* 306 */     if (((String)this.modeValue.get()).equalsIgnoreCase("aac3.5.0") && this.freeze) {
/* 307 */       event.zeroXZ();
/*     */     }
/*     */   }
/*     */   
/*     */   @EventTarget
/*     */   public void onPacket(PacketEvent event) {
/* 313 */     IPacket packet = event.getPacket();
/*     */     
/* 315 */     if (this.disableLogger) {
/*     */       return;
/*     */     }
/* 318 */     if (classProvider.isCPacketPlayer(packet)) {
/* 319 */       ICPacketPlayer packetPlayer = packet.asCPacketPlayer();
/*     */       
/* 321 */       switch (((String)this.modeValue.get()).toLowerCase()) {
/*     */         case "spoof":
/* 323 */           if (this.endPos == null) {
/*     */             break;
/*     */           }
/* 326 */           packetPlayer.setX(this.endPos.getX() + 0.5D);
/* 327 */           packetPlayer.setY((this.endPos.getY() + 1));
/* 328 */           packetPlayer.setZ(this.endPos.getZ() + 0.5D);
/*     */           
/* 330 */           mc.getThePlayer().setPosition(this.endPos.getX() + 0.5D, (this.endPos.getY() + 1), this.endPos.getZ() + 0.5D);
/*     */           break;
/*     */         case "aac3.5.0":
/* 333 */           if (!this.flyTimer.hasTimePassed(60)) {
/*     */             return;
/*     */           }
/* 336 */           event.cancelEvent();
/*     */           
/* 338 */           if (!classProvider.isCPacketPlayerPosition(packet) && !classProvider.isCPacketPlayerPosLook(packet)) {
/*     */             return;
/*     */           }
/* 341 */           this.packets.add(packet);
/*     */           break;
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public String getTag() {
/* 349 */     return (String)this.modeValue.get();
/*     */   }
/*     */ }


/* Location:              C:\Users\Administrator\Desktop\XSJ Client v2.3 New Year's Special Edition.jar!\net\ccbluex\liquidbounce\features\module\modules\exploit\Teleport.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */